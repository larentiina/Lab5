Реализовать консольное приложение, которое реализует управление коллекцией объектов в интерактивном режиме. В коллекции необходимо хранить объекты класса Person, описание которого приведено ниже.
Разработанная программа должна удовлетворять следующим требованиям:
•	Класс, коллекцией экземпляров которого управляет программа, должен реализовывать сортировку по умолчанию.
•	Все требования к полям класса (указанные в виде комментариев) должны быть выполнены.
•	Для хранения необходимо использовать коллекцию типа java.util.Hashtable
•	При запуске приложения коллекция должна автоматически заполняться значениями из файла.
•	Имя файла должно передаваться программе с помощью: переменная окружения.
•	Данные должны храниться в файле в формате xml
•	Чтение данных из файла необходимо реализовать с помощью класса java.util.Scanner
•	Запись данных в файл необходимо реализовать с помощью класса java.io.FileWriter
•	Все классы в программе должны быть задокументированы в формате javadoc.
•	Программа должна корректно работать с неправильными данными (ошибки пользовательского ввода, отсутсвие прав доступа к файлу и т.п.).


В интерактивном режиме программа должна поддерживать выполнение следующих команд:
•	help : вывести справку по доступным командам
•	info : вывести в стандартный поток вывода информацию о коллекции (тип, дата инициализации, количество элементов и т.д.)
•	show : вывести в стандартный поток вывода все элементы коллекции в строковом представлении
•	insert null {element} : добавить новый элемент с заданным ключом
•
•	remove_key null : удалить элемент из коллекции по его ключу
•	clear : очистить коллекцию
•	save : сохранить коллекцию в файл
•	execute_script file_name : считать и исполнить скрипт из указанного файла. В скрипте содержатся команды в таком же виде, в котором их вводит пользователь в интерактивном режиме.
•	exit : завершить программу (без сохранения в файл)
•	history : вывести последние 7 команд (без их аргументов)
•	replace_if_greater null {element} : заменить значение по ключу, если новое значение больше старого
•	replace_if_lowe null {element} : заменить значение по ключу, если новое значение меньше старого
•	remove_any_by_height height : удалить из коллекции один элемент, значение поля height которого эквивалентно заданному
•	sum_of_height : вывести сумму значений поля height для всех элементов коллекции
•	filter_greater_than_location location : вывести элементы, значение поля location которых больше заданного
Формат ввода команд:
•	Все аргументы команды, являющиеся стандартными типами данных (примитивные типы, классы-оболочки, String, классы для хранения дат), должны вводиться в той же строке, что и имя команды.
•	Все составные типы данных (объекты классов, хранящиеся в коллекции) должны вводиться по одному полю в строку.
•	При вводе составных типов данных пользователю должно показываться приглашение к вводу, содержащее имя поля (например, "Введите дату рождения:")
•	Если поле является enum'ом, то вводится имя одной из его констант (при этом список констант должен быть предварительно выведен).
•	При некорректном пользовательском вводе (введена строка, не являющаяся именем константы в enum'е; введена строка вместо числа; введённое число не входит в указанные границы и т.п.) должно быть показано сообщение об ошибке и предложено повторить ввод поля.
•	Для ввода значений null использовать пустую строку.
•	Поля с комментарием "Значение этого поля должно генерироваться автоматически" не должны вводиться пользователем вручную при добавлении.
Описание хранимых в коллекции классов:
public class Person {
    private Integer id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    private String name; //Поле не может быть null, Строка не может быть пустой
    private Coordinates coordinates; //Поле не может быть null
    private java.time.ZonedDateTime creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    private double height; //Значение поля должно быть больше 0
    private String passportID; //Значение этого поля должно быть уникальным, Строка не может быть пустой, Поле не может быть null
    private Color eyeColor; //Поле может быть null
    private Color hairColor; //Поле может быть null
    private Location location; //Поле может быть null
}
public class Coordinates {
    private int x;
    private double y;
}
public class Location {
    private double x;
    private long y;
    private Long z; //Поле не может быть null
}
public enum Color {
    GREEN,
    RED,
    YELLOW;
}
public enum Color {
    GREEN,
    BLACK,
    BLUE,
    YELLOW,
    ORANGE;
